// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dish_service.proto

package restaurant_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DishService_GetDishes_FullMethodName             = "/restaurant_rpc.DishService/GetDishes"
	DishService_GetDishType_FullMethodName           = "/restaurant_rpc.DishService/GetDishType"
	DishService_AddDishType_FullMethodName           = "/restaurant_rpc.DishService/AddDishType"
	DishService_GetMaterials_FullMethodName          = "/restaurant_rpc.DishService/GetMaterials"
	DishService_CreateOrEditMaterial_FullMethodName  = "/restaurant_rpc.DishService/CreateOrEditMaterial"
	DishService_CreateOrEditDish_FullMethodName      = "/restaurant_rpc.DishService/CreateOrEditDish"
	DishService_GetDishesWithCategory_FullMethodName = "/restaurant_rpc.DishService/GetDishesWithCategory"
)

// DishServiceClient is the client API for DishService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DishServiceClient interface {
	GetDishes(ctx context.Context, in *GetDishesReq, opts ...grpc.CallOption) (*GetDishesResp, error)
	GetDishType(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDishTypeResp, error)
	AddDishType(ctx context.Context, in *AddDishTypeReq, opts ...grpc.CallOption) (*AddDishTypeResp, error)
	GetMaterials(ctx context.Context, in *GetMaterialsReq, opts ...grpc.CallOption) (*GetMaterialsResp, error)
	CreateOrEditMaterial(ctx context.Context, in *CreateOrEditMaterialReq, opts ...grpc.CallOption) (*CreateOrEditMaterialResp, error)
	CreateOrEditDish(ctx context.Context, in *CreateOrEditDishReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDishesWithCategory(ctx context.Context, in *GetDishesWithCategoryReq, opts ...grpc.CallOption) (*GetDishesWithCategoryResp, error)
}

type dishServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDishServiceClient(cc grpc.ClientConnInterface) DishServiceClient {
	return &dishServiceClient{cc}
}

func (c *dishServiceClient) GetDishes(ctx context.Context, in *GetDishesReq, opts ...grpc.CallOption) (*GetDishesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDishesResp)
	err := c.cc.Invoke(ctx, DishService_GetDishes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishServiceClient) GetDishType(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDishTypeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDishTypeResp)
	err := c.cc.Invoke(ctx, DishService_GetDishType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishServiceClient) AddDishType(ctx context.Context, in *AddDishTypeReq, opts ...grpc.CallOption) (*AddDishTypeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDishTypeResp)
	err := c.cc.Invoke(ctx, DishService_AddDishType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishServiceClient) GetMaterials(ctx context.Context, in *GetMaterialsReq, opts ...grpc.CallOption) (*GetMaterialsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMaterialsResp)
	err := c.cc.Invoke(ctx, DishService_GetMaterials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishServiceClient) CreateOrEditMaterial(ctx context.Context, in *CreateOrEditMaterialReq, opts ...grpc.CallOption) (*CreateOrEditMaterialResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrEditMaterialResp)
	err := c.cc.Invoke(ctx, DishService_CreateOrEditMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishServiceClient) CreateOrEditDish(ctx context.Context, in *CreateOrEditDishReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DishService_CreateOrEditDish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishServiceClient) GetDishesWithCategory(ctx context.Context, in *GetDishesWithCategoryReq, opts ...grpc.CallOption) (*GetDishesWithCategoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDishesWithCategoryResp)
	err := c.cc.Invoke(ctx, DishService_GetDishesWithCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DishServiceServer is the server API for DishService service.
// All implementations must embed UnimplementedDishServiceServer
// for forward compatibility.
type DishServiceServer interface {
	GetDishes(context.Context, *GetDishesReq) (*GetDishesResp, error)
	GetDishType(context.Context, *emptypb.Empty) (*GetDishTypeResp, error)
	AddDishType(context.Context, *AddDishTypeReq) (*AddDishTypeResp, error)
	GetMaterials(context.Context, *GetMaterialsReq) (*GetMaterialsResp, error)
	CreateOrEditMaterial(context.Context, *CreateOrEditMaterialReq) (*CreateOrEditMaterialResp, error)
	CreateOrEditDish(context.Context, *CreateOrEditDishReq) (*emptypb.Empty, error)
	GetDishesWithCategory(context.Context, *GetDishesWithCategoryReq) (*GetDishesWithCategoryResp, error)
	mustEmbedUnimplementedDishServiceServer()
}

// UnimplementedDishServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDishServiceServer struct{}

func (UnimplementedDishServiceServer) GetDishes(context.Context, *GetDishesReq) (*GetDishesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDishes not implemented")
}
func (UnimplementedDishServiceServer) GetDishType(context.Context, *emptypb.Empty) (*GetDishTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDishType not implemented")
}
func (UnimplementedDishServiceServer) AddDishType(context.Context, *AddDishTypeReq) (*AddDishTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDishType not implemented")
}
func (UnimplementedDishServiceServer) GetMaterials(context.Context, *GetMaterialsReq) (*GetMaterialsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterials not implemented")
}
func (UnimplementedDishServiceServer) CreateOrEditMaterial(context.Context, *CreateOrEditMaterialReq) (*CreateOrEditMaterialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrEditMaterial not implemented")
}
func (UnimplementedDishServiceServer) CreateOrEditDish(context.Context, *CreateOrEditDishReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrEditDish not implemented")
}
func (UnimplementedDishServiceServer) GetDishesWithCategory(context.Context, *GetDishesWithCategoryReq) (*GetDishesWithCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDishesWithCategory not implemented")
}
func (UnimplementedDishServiceServer) mustEmbedUnimplementedDishServiceServer() {}
func (UnimplementedDishServiceServer) testEmbeddedByValue()                     {}

// UnsafeDishServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DishServiceServer will
// result in compilation errors.
type UnsafeDishServiceServer interface {
	mustEmbedUnimplementedDishServiceServer()
}

func RegisterDishServiceServer(s grpc.ServiceRegistrar, srv DishServiceServer) {
	// If the following call pancis, it indicates UnimplementedDishServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DishService_ServiceDesc, srv)
}

func _DishService_GetDishes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDishesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServiceServer).GetDishes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishService_GetDishes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServiceServer).GetDishes(ctx, req.(*GetDishesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishService_GetDishType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServiceServer).GetDishType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishService_GetDishType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServiceServer).GetDishType(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishService_AddDishType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDishTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServiceServer).AddDishType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishService_AddDishType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServiceServer).AddDishType(ctx, req.(*AddDishTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishService_GetMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterialsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServiceServer).GetMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishService_GetMaterials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServiceServer).GetMaterials(ctx, req.(*GetMaterialsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishService_CreateOrEditMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrEditMaterialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServiceServer).CreateOrEditMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishService_CreateOrEditMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServiceServer).CreateOrEditMaterial(ctx, req.(*CreateOrEditMaterialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishService_CreateOrEditDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrEditDishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServiceServer).CreateOrEditDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishService_CreateOrEditDish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServiceServer).CreateOrEditDish(ctx, req.(*CreateOrEditDishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishService_GetDishesWithCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDishesWithCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServiceServer).GetDishesWithCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishService_GetDishesWithCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServiceServer).GetDishesWithCategory(ctx, req.(*GetDishesWithCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DishService_ServiceDesc is the grpc.ServiceDesc for DishService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DishService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restaurant_rpc.DishService",
	HandlerType: (*DishServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDishes",
			Handler:    _DishService_GetDishes_Handler,
		},
		{
			MethodName: "GetDishType",
			Handler:    _DishService_GetDishType_Handler,
		},
		{
			MethodName: "AddDishType",
			Handler:    _DishService_AddDishType_Handler,
		},
		{
			MethodName: "GetMaterials",
			Handler:    _DishService_GetMaterials_Handler,
		},
		{
			MethodName: "CreateOrEditMaterial",
			Handler:    _DishService_CreateOrEditMaterial_Handler,
		},
		{
			MethodName: "CreateOrEditDish",
			Handler:    _DishService_CreateOrEditDish_Handler,
		},
		{
			MethodName: "GetDishesWithCategory",
			Handler:    _DishService_GetDishesWithCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dish_service.proto",
}
